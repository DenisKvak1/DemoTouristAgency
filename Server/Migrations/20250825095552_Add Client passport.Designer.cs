// <auto-generated />
using System;
using ClientDemoAngular.Server.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825095552_Add Client passport")]
    partial class AddClientpassport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ClientClientTag");
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowNewSletter")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("MiddleName");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPassport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Authority")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ClientsPassports", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number");

                    b.ToTable("ClientsPhones", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ClientTags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f4a40b7-7e70-4d7c-a749-e7231989e89e"),
                            Name = "VIP"
                        },
                        new
                        {
                            Id = new Guid("52633958-f984-41c5-a275-71f5c13f9c58"),
                            Name = "Пляжный отдых"
                        },
                        new
                        {
                            Id = new Guid("275506d2-3eed-44fb-85ee-ed234844b3e0"),
                            Name = "Гірнолижний отдых"
                        },
                        new
                        {
                            Id = new Guid("67aafb75-1fc6-4ad8-a15e-4574d12523b1"),
                            Name = "Постоянный клиент"
                        },
                        new
                        {
                            Id = new Guid("fafe9349-fee0-4c92-b035-fb22bf338c5f"),
                            Name = "Экскурсионный отдых"
                        },
                        new
                        {
                            Id = new Guid("0bd4e9fe-9f70-43f3-9a5b-a5e3474ba503"),
                            Name = "Эконом"
                        },
                        new
                        {
                            Id = new Guid("06956855-0e82-4c00-b8ff-0287cb619e1a"),
                            Name = "Активный отдых"
                        },
                        new
                        {
                            Id = new Guid("44d7c07f-516e-4a60-b9b6-c05423870c00"),
                            Name = "Ездит один"
                        },
                        new
                        {
                            Id = new Guid("654a6de0-2026-4b7d-b458-a0d38c8320a1"),
                            Name = "Семейный отдых"
                        });
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb05478-0129-49d0-986e-62a9870fe393"),
                            Name = "SMS",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("4f24b9d5-6e13-46ae-baeb-e1f31389d092"),
                            Name = "Telegram",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("df49d0b2-f09f-409b-8d27-ee20b4508333"),
                            Name = "Viber",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("d692b28d-6924-4b18-878e-ec6f91f38df0"),
                            Name = "WhatsApp",
                            SecretKey = ""
                        });
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.Property<Guid>("ClientPhonesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientPhonesId", "SocialMediasId");

                    b.HasIndex("SocialMediasId");

                    b.ToTable("ClientPhoneSocialMedia");
                });

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPassport", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", "Client")
                        .WithOne("Passport")
                        .HasForeignKey("ClientDemoAngular.Server.Domain.Entities.ClientPassport", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", "Client")
                        .WithMany("Phones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientPhone", null)
                        .WithMany()
                        .HasForeignKey("ClientPhonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.SocialMedia", null)
                        .WithMany()
                        .HasForeignKey("SocialMediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Navigation("Passport")
                        .IsRequired();

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
