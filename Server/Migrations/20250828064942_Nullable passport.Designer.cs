// <auto-generated />
using System;
using ClientDemoAngular.Server.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828064942_Nullable passport")]
    partial class Nullablepassport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ClientClientTag");
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowNewSletter")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("MiddleName");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPassport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Authority")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfExpiry")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ClientsPassports", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number");

                    b.ToTable("ClientsPhones", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ClientTags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9674443-0b2e-4644-a52a-2e034cab2db1"),
                            Name = "VIP"
                        },
                        new
                        {
                            Id = new Guid("25b5adc6-b63f-4eb0-b228-dcba2c18db53"),
                            Name = "Пляжный отдых"
                        },
                        new
                        {
                            Id = new Guid("0699cbf7-3941-47e5-b209-9450bb65d95b"),
                            Name = "Гірнолижний отдых"
                        },
                        new
                        {
                            Id = new Guid("4f46161e-ef0b-4c96-b4bf-dc2e81f0ee62"),
                            Name = "Постоянный клиент"
                        },
                        new
                        {
                            Id = new Guid("31d49a3e-480c-46f7-a7b5-f66016f3b3cd"),
                            Name = "Экскурсионный отдых"
                        },
                        new
                        {
                            Id = new Guid("6b3f4806-06c8-4437-8bd4-df0df81eaaea"),
                            Name = "Эконом"
                        },
                        new
                        {
                            Id = new Guid("70543c2f-4057-4222-aaad-9a795ebf2e2e"),
                            Name = "Активный отдых"
                        },
                        new
                        {
                            Id = new Guid("a3ce797f-dbb1-45ee-84e2-1c3f59c5a28b"),
                            Name = "Ездит один"
                        },
                        new
                        {
                            Id = new Guid("48bc75eb-a591-4328-afed-43e8cf9d259e"),
                            Name = "Семейный отдых"
                        });
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d4f8642-a837-4baf-92d2-373a8258171b"),
                            Name = "SMS",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("3ec62e8a-fcee-4d9d-998e-e587d8839b59"),
                            Name = "Telegram",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("f033cf56-6198-41b2-87d5-e4ca03c42090"),
                            Name = "Viber",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("964542f8-f1fa-4c98-acaa-10a2454461a6"),
                            Name = "WhatsApp",
                            SecretKey = ""
                        });
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.Property<Guid>("ClientPhonesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientPhonesId", "SocialMediasId");

                    b.HasIndex("SocialMediasId");

                    b.ToTable("ClientPhoneSocialMedia");
                });

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPassport", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", "Client")
                        .WithOne("Passport")
                        .HasForeignKey("ClientDemoAngular.Server.Domain.Entities.ClientPassport", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", "Client")
                        .WithMany("Phones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientPhone", null)
                        .WithMany()
                        .HasForeignKey("ClientPhonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.SocialMedia", null)
                        .WithMany()
                        .HasForeignKey("SocialMediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Navigation("Passport");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
