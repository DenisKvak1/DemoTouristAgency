// <auto-generated />
using System;
using ClientDemoAngular.Server.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ClientClientTag");
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowNewSletter")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("MiddleName");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Number");

                    b.ToTable("ClientsPhones", (string)null);
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ClientTags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1e04141-db1f-456d-917b-6d09b54c944e"),
                            Name = "VIP"
                        },
                        new
                        {
                            Id = new Guid("f800ad54-bd85-4d14-bace-4dddb53b79ae"),
                            Name = "Пляжный отдых"
                        },
                        new
                        {
                            Id = new Guid("67174e5c-bf1d-48e0-b899-d12b806d1354"),
                            Name = "Гірнолижний отдых"
                        },
                        new
                        {
                            Id = new Guid("c4846917-4ac1-43fd-a31e-263b53cc29f7"),
                            Name = "Постоянный клиент"
                        },
                        new
                        {
                            Id = new Guid("e91e15dd-c410-47f7-80f8-f3167fd3a3b9"),
                            Name = "Экскурсионный отдых"
                        },
                        new
                        {
                            Id = new Guid("72173a88-fe04-41fe-a5da-330cd2614df2"),
                            Name = "Эконом"
                        },
                        new
                        {
                            Id = new Guid("037c14c8-8007-4dc2-b5a6-9a8e04b31005"),
                            Name = "Активный отдых"
                        },
                        new
                        {
                            Id = new Guid("d27f8fb3-43d5-415f-8b49-4a1e1bc4acd7"),
                            Name = "Ездит один"
                        },
                        new
                        {
                            Id = new Guid("b6c79da8-8226-4576-bc86-9bca9a86bdb1"),
                            Name = "Семейный отдых"
                        });
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9151dd2-7d1b-4814-a072-7f9887ce0825"),
                            Name = "SMS",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("c9dd4dd4-0766-430d-85f4-856777f7274f"),
                            Name = "Telegram",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("fa053701-ca07-459e-a486-f8a0e8a19cce"),
                            Name = "Viber",
                            SecretKey = ""
                        },
                        new
                        {
                            Id = new Guid("529c6f82-4a00-4ac1-8f3f-e7ae86ab29cf"),
                            Name = "WhatsApp",
                            SecretKey = ""
                        });
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.Property<Guid>("ClientPhonesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientPhonesId", "SocialMediasId");

                    b.HasIndex("SocialMediasId");

                    b.ToTable("ClientPhoneSocialMedia");
                });

            modelBuilder.Entity("ClientClientTag", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.ClientPhone", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.Client", "Client")
                        .WithMany("Phones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientPhoneSocialMedia", b =>
                {
                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.ClientPhone", null)
                        .WithMany()
                        .HasForeignKey("ClientPhonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientDemoAngular.Server.Domain.Entities.SocialMedia", null)
                        .WithMany()
                        .HasForeignKey("SocialMediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientDemoAngular.Server.Domain.Entities.Client", b =>
                {
                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
